@use "sass:list";
@use "sass:meta";
@use "sass:math";

/**
 * Strip CSS units from a value.
 *
 * @param {String} $value A CSS length value.
 *
 * @returns {String} A unitless value.
 */
@function _strip-units($value) {
  @if (meta.type-of($value) == 'number' and not math.is-unitless($value)) {
    @return math.div($value, $value * 0 + 1);
  }

  @return $value;
}

/**
 * Convert px to rem or em
 * Unitless values are assumed to be in px
 *
 * @param {Number|List} $values Single value or list of values to convert
 * @param {Number} $base-value  Root font size on which to base conversions
 *
 * @returns {String} A rem value.
 */
@function _px-to-relative($px, $base-value) {
  @if ('rem' == math.unit($px) or 0 == $px) {
    @return $px;
  }

  @return math.div(_strip-units($px), $base-value) * 1rem;
}

/**
 * Convert a list of px values (with or without the 'px' string) to either rem or em
 *
 * @param {Number|List} $values Single value or list of values to convert
 * @param {Number} $base-value  Root font size on which to base conversions
 *
 * @returns {List|Number} A list of rem values, or a single value.
 */
@function _px-to-relative-list($values, $base-value) {
  $rem-values: ();

  @for $i from 1 through list.length($values) {
    $value: list.nth($values, $i);

    $rem-value: if(
      string == meta.type-of($value),
      $value,
      _px-to-relative(list.nth($values, $i), $base-value)
    );

    $rem-values: list.append($rem-values, $rem-value);
  }

  @return if(
    1 < list.length($rem-values),
    $rem-values,
    list.nth($rem-values, 1)
  );
}

/**
 * Convert a list of px values (with or without the 'px' string) to rem
 *
 * @param {List}   $values Single value or list of values to convert
 * @param {Number} $base-value Root font size on which to base conversions
 */
@function rem($values, $base-value: 16) {
  @return _px-to-relative-list($values, $base-value);
}

/**
 * Negate a number _the Sass way_
 *
 * @param  {Number} $value The number to be negated.
 * @return {Number}
 */
@function negate($number) {
  @return ($number * -1);
}

/**
 * Remove browser default form element styles.
 */
@mixin form-element-reset {
  appearance: none;
  border-radius: 0;
  border: none;
  font: inherit;
  margin: 0;
}

/**
 * Remove browser default button styles.
 */
@mixin button-reset {
  @include form-element-reset;
  background-color: transparent;
  padding: 0;
}
